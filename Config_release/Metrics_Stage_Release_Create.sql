/*
Deployment script for ODE_Metrics_Stage

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar ODE_Config "ODE_Config"
:setvar ODE_Metrics_Stage "ODE_Metrics_Stage"
:setvar ODE_Metrics_Vault "ODE_Metrics_Vault"
:setvar DatabaseName "ODE_Metrics_Stage"
:setvar DefaultFilePrefix "ODE_Metrics_Stage"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [stage]...';


GO
CREATE SCHEMA [stage]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [stage].[DV_Satellite_Column]...';


GO
CREATE TABLE [stage].[DV_Satellite_Column] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [satellite_col_key]      INT                NOT NULL,
    [satellite_key]          INT                NOT NULL,
    [column_key]             INT                NOT NULL,
    [release_key]            INT                NOT NULL,
    [release_number]         INT                NULL,
    [version_number]         INT                NOT NULL,
    [updated_by]             VARCHAR (30)       NULL,
    [updated_datetime]       DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[DV_Source_Table]...';


GO
CREATE TABLE [stage].[DV_Source_Table] (
    [metrics_stage_run_time]       DATETIMEOFFSET (7) NOT NULL,
    [source_table_key]             INT                NULL,
    [source_system_key]            INT                NULL,
    [source_system_is_retired]     BIT                NULL,
    [source_system_name]           VARCHAR (50)       NULL,
    [timevault_name]               VARCHAR (50)       NULL,
    [source_system_release_key]    INT                NULL,
    [source_system_release_number] INT                NULL,
    [source_table_schema]          VARCHAR (128)      NULL,
    [source_table_name]            VARCHAR (128)      NULL,
    [source_table_load_type]       VARCHAR (50)       NULL,
    [source_procedure_schema]      VARCHAR (128)      NULL,
    [source_procedure_name]        VARCHAR (128)      NULL,
    [is_retired]                   BIT                NULL,
    [release_key]                  INT                NULL,
    [release_number]               INT                NULL,
    [updated_by]                   VARCHAR (30)       NULL,
    [update_date_time]             DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[Link_Journal_Exception]...';


GO
CREATE TABLE [stage].[Link_Journal_Exception] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [ExceptionId]            INT                NULL,
    [JournalId]              INT                NULL
);


GO
PRINT N'Creating [stage].[Link_Table_Schedule]...';


GO
CREATE TABLE [stage].[Link_Table_Schedule] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [schedule_key]           INT                NULL,
    [schedule_table_key]     INT                NULL,
    [source_table_key]       INT                NULL
);


GO
PRINT N'Creating [stage].[Link_Satellite_Column]...';


GO
CREATE TABLE [stage].[Link_Satellite_Column] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [satellite_key]          INT                NULL,
    [column_key]             INT                NULL
);


GO
PRINT N'Creating [stage].[Hub_DataDictionary]...';


GO
CREATE TABLE [stage].[Hub_DataDictionary] (
    [hub_key]                INT                NULL,
    [Description]            VARCHAR (255)      NULL,
    [BusinessRule]           VARCHAR (8000)     NULL,
    [metrics_stage_run_time] DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[Satellite_DataDictionary]...';


GO
CREATE TABLE [stage].[Satellite_DataDictionary] (
    [satellite_key]          INT                NULL,
    [Description]            VARCHAR (255)      NULL,
    [BusinessRule]           VARCHAR (8000)     NULL,
    [metrics_stage_run_time] DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[Link_DataDictionary]...';


GO
CREATE TABLE [stage].[Link_DataDictionary] (
    [link_key]               INT                NULL,
    [Description]            VARCHAR (255)      NULL,
    [BusinessRule]           VARCHAR (8000)     NULL,
    [metrics_stage_run_time] DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[Column_DataDictionary]...';


GO
CREATE TABLE [stage].[Column_DataDictionary] (
    [column_key]             INT                NULL,
    [Description]            VARCHAR (255)      NULL,
    [BusinessRule]           VARCHAR (8000)     NULL,
    [metrics_stage_run_time] DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[HubKey_DataDictionary]...';


GO
CREATE TABLE [stage].[HubKey_DataDictionary] (
    [hub_key_column_key]     INT                NULL,
    [Description]            VARCHAR (255)      NULL,
    [BusinessRule]           VARCHAR (8000)     NULL,
    [metrics_stage_run_time] DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[SourceTable_DataDictionary]...';


GO
CREATE TABLE [stage].[SourceTable_DataDictionary] (
    [source_table_key]       INT                NULL,
    [ShortDescription]       VARCHAR (255)      NULL,
    [LongDescription]        VARCHAR (8000)     NULL,
    [metrics_stage_run_time] DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[Satellite_Integrity]...';


GO
CREATE TABLE [stage].[Satellite_Integrity] (
    [RunDate]           DATETIMEOFFSET (7) NULL,
    [SatelliteKey]      INT                NULL,
    [SatelliteName]     VARCHAR (128)      NULL,
    [TotalRowCount]     BIGINT             NULL,
    [CurrentRowCount]   BIGINT             NULL,
    [VersionedRowCount] BIGINT             NULL,
    [TombstoneRowCount] BIGINT             NULL
);


GO
PRINT N'Creating [stage].[Link_Integrity]...';


GO
CREATE TABLE [stage].[Link_Integrity] (
    [RunDate]          DATETIMEOFFSET (7) NULL,
    [LinkKey]          INT                NULL,
    [LinkName]         VARCHAR (128)      NULL,
    [SourceTableKey]   INT                NULL,
    [SourceSystemName] VARCHAR (128)      NULL,
    [SourceTableName]  VARCHAR (128)      NULL,
    [TotalRowCount]    BIGINT             NULL
);


GO
PRINT N'Creating [stage].[Hub_Integrity]...';


GO
CREATE TABLE [stage].[Hub_Integrity] (
    [RunDate]          DATETIMEOFFSET (7) NULL,
    [HubKey]           INT                NULL,
    [HubName]          VARCHAR (128)      NULL,
    [SourceTableKey]   INT                NULL,
    [SourceSystemName] VARCHAR (128)      NULL,
    [SourceTableName]  VARCHAR (128)      NULL,
    [TotalRowCount]    BIGINT             NULL
);


GO
PRINT N'Creating [stage].[Column_Integrity]...';


GO
CREATE TABLE [stage].[Column_Integrity] (
    [RunDate]       DATETIMEOFFSET (7) NULL,
    [SatelliteKey]  INT                NULL,
    [SatelliteName] VARCHAR (128)      NULL,
    [ColumnName]    VARCHAR (128)      NULL,
    [ColumnKey]     INT                NULL,
    [MinValue]      VARCHAR (MAX)      NULL,
    [MaxValue]      VARCHAR (MAX)      NULL,
    [DomainCount]   BIGINT             NULL,
    [NullCount]     BIGINT             NULL,
    [BlankCount]    BIGINT             NULL,
    [MinLength]     BIGINT             NULL,
    [MaxLength]     BIGINT             NULL
);


GO
PRINT N'Creating [stage].[DV_Column]...';


GO
CREATE TABLE [stage].[DV_Column] (
    [metrics_stage_run_time]     DATETIMEOFFSET (7) NOT NULL,
    [column_key]                 INT                NOT NULL,
    [table_key]                  INT                NOT NULL,
    [column_name]                VARCHAR (128)      NOT NULL,
    [column_type]                VARCHAR (30)       NOT NULL,
    [column_length]              INT                NULL,
    [column_precision]           INT                NULL,
    [column_scale]               INT                NULL,
    [Collation_Name]             [sysname]          NULL,
    [bk_ordinal_position]        INT                NOT NULL,
    [source_ordinal_position]    INT                NOT NULL,
    [satellite_ordinal_position] INT                NOT NULL,
    [is_source_date]             BIT                NOT NULL,
    [discard_flag]               BIT                NOT NULL,
    [is_retired]                 BIT                NOT NULL,
    [release_key]                INT                NOT NULL,
    [release_number]             INT                NULL,
    [version_number]             INT                NOT NULL,
    [updated_by]                 VARCHAR (30)       NULL,
    [update_date_time]           DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[DV_Exception]...';


GO
CREATE TABLE [stage].[DV_Exception] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [ExceptionId]            INT                IDENTITY (1, 1) NOT NULL,
    [UtcDate]                DATETIME           NULL,
    [SystemDate]             DATETIME           NULL,
    [ErrorContext]           NVARCHAR (512)     NULL,
    [ErrorNumber]            INT                NULL,
    [ErrorSeverity]          INT                NULL,
    [ErrorState]             INT                NULL,
    [ErrorProcedure]         NVARCHAR (128)     NULL,
    [ErrorLine]              INT                NULL,
    [ErrorMessage]           NVARCHAR (MAX)     NULL,
    [SessionId]              INT                NULL,
    [ServerName]             NVARCHAR (128)     NULL,
    [DatabaseName]           NVARCHAR (128)     NULL,
    [HostName]               NVARCHAR (128)     NULL,
    [ProgramName]            NVARCHAR (128)     NULL,
    [NTDomain]               NVARCHAR (128)     NULL,
    [NTUsername]             NVARCHAR (128)     NULL,
    [LoginName]              NVARCHAR (128)     NULL,
    [OriginalLoginName]      NVARCHAR (128)     NULL,
    [SessionLoginTime]       DATETIME           NULL
);


GO
PRINT N'Creating [stage].[DV_Hub]...';


GO
CREATE TABLE [stage].[DV_Hub] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [hub_key]                INT                NOT NULL,
    [hub_name]               VARCHAR (128)      NOT NULL,
    [hub_abbreviation]       VARCHAR (4)        NULL,
    [hub_schema]             VARCHAR (128)      NOT NULL,
    [hub_database]           VARCHAR (128)      NOT NULL,
    [is_retired]             BIT                NOT NULL,
    [release_key]            INT                NOT NULL,
    [release_number]         INT                NULL,
    [version_number]         INT                NOT NULL,
    [updated_by]             VARCHAR (30)       NULL,
    [updated_datetime]       DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[DV_Hub_Key]...';


GO
CREATE TABLE [stage].[DV_Hub_Key] (
    [metrics_stage_run_time]   DATETIMEOFFSET (7) NOT NULL,
    [hub_key_column_key]       INT                NOT NULL,
    [hub_key]                  INT                NOT NULL,
    [hub_key_column_name]      VARCHAR (128)      NOT NULL,
    [hub_key_column_type]      VARCHAR (30)       NOT NULL,
    [hub_key_column_length]    INT                NULL,
    [hub_key_column_precision] INT                NULL,
    [hub_key_column_scale]     INT                NULL,
    [hub_key_Collation_Name]   [sysname]          NULL,
    [hub_key_ordinal_position] INT                NOT NULL,
    [release_key]              INT                NOT NULL,
    [release_number]           INT                NULL,
    [version_number]           INT                NOT NULL,
    [updated_by]               VARCHAR (30)       NULL,
    [updated_datetime]         DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[DV_Hub_Link]...';


GO
CREATE TABLE [stage].[DV_Hub_Link] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [hub_link_key]           INT                NOT NULL,
    [link_key]               INT                NOT NULL,
    [hub_key]                INT                NOT NULL,
    [release_key]            INT                NOT NULL,
    [release_number]         INT                NULL,
    [version_number]         INT                NOT NULL,
    [updated_by]             VARCHAR (30)       NULL,
    [updated_datetime]       DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[DV_Journal]...';


GO
CREATE TABLE [stage].[DV_Journal] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [JournalId]              INT                NOT NULL,
    [UtcDate]                DATETIME           NULL,
    [SystemDate]             DATETIME           NULL,
    [Task]                   VARCHAR (128)      NULL,
    [FunctionName]           VARCHAR (256)      NULL,
    [StepInFunction]         VARCHAR (128)      NULL,
    [MessageText]            VARCHAR (512)      NULL,
    [SeverityId]             INT                NULL,
    [ExceptionId]            INT                NULL,
    [SessionId]              INT                NULL,
    [ServerName]             NVARCHAR (128)     NULL,
    [DatabaseName]           NVARCHAR (128)     NULL,
    [HostName]               NVARCHAR (128)     NULL,
    [ProgramName]            NVARCHAR (128)     NULL,
    [NTDomain]               NVARCHAR (128)     NULL,
    [NTUsername]             NVARCHAR (128)     NULL,
    [LoginName]              NVARCHAR (128)     NULL,
    [OriginalLoginName]      NVARCHAR (128)     NULL,
    [SessionLoginTime]       DATETIME           NULL,
    [ExtraInfo]              VARCHAR (MAX)      NULL
);


GO
PRINT N'Creating [stage].[DV_Link]...';


GO
CREATE TABLE [stage].[DV_Link] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [link_key]               INT                NOT NULL,
    [link_name]              VARCHAR (128)      NOT NULL,
    [link_abbreviation]      VARCHAR (4)        NULL,
    [link_schema]            VARCHAR (128)      NOT NULL,
    [link_database]          VARCHAR (128)      NOT NULL,
    [is_retired]             BIT                NOT NULL,
    [release_key]            INT                NOT NULL,
    [release_number]         INT                NULL,
    [version_number]         INT                NOT NULL,
    [updated_by]             VARCHAR (30)       NULL,
    [updated_datetime]       DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[DV_Release]...';


GO
CREATE TABLE [stage].[DV_Release] (
    [metrics_stage_run_time]    DATETIMEOFFSET (7) NOT NULL,
    [release_number]            INT                NOT NULL,
    [release_description]       VARCHAR (256)      NULL,
    [reference_number]          VARCHAR (50)       NULL,
    [reference_source]          VARCHAR (50)       NULL,
    [build_number]              INT                NOT NULL,
    [build_date]                DATETIMEOFFSET (7) NULL,
    [build_server]              VARCHAR (256)      NULL,
    [release_built_by]          VARCHAR (30)       NULL,
    [release_start_datetime]    DATETIMEOFFSET (7) NULL,
    [release_complete_datetime] DATETIMEOFFSET (7) NULL,
    [release_count]             INT                NOT NULL,
    [version_number]            INT                NOT NULL,
    [updated_by]                VARCHAR (30)       NOT NULL,
    [updated_datetime]          DATETIMEOFFSET (7) NOT NULL
);


GO
PRINT N'Creating [stage].[DV_Run_Manifest]...';


GO
CREATE TABLE [stage].[DV_Run_Manifest] (
    [metrics_stage_run_time]  DATETIMEOFFSET (7) NOT NULL,
    [run_manifest_key]        INT                IDENTITY (1, 1) NOT NULL,
    [run_key]                 INT                NOT NULL,
    [source_system_name]      VARCHAR (50)       NOT NULL,
    [source_timevault]        VARCHAR (50)       NULL,
    [source_table_schema]     [sysname]          NOT NULL,
    [source_table_name]       [sysname]          NOT NULL,
    [source_table_load_type]  VARCHAR (50)       NOT NULL,
    [source_table_key]        INT                NOT NULL,
    [source_procedure_schema] VARCHAR (128)      NULL,
    [source_procedure_name]   VARCHAR (128)      NULL,
    [priority]                VARCHAR (10)       NOT NULL,
    [queue]                   VARCHAR (10)       NOT NULL,
    [start_datetime]          DATETIMEOFFSET (7) NULL,
    [completed_datetime]      DATETIMEOFFSET (7) NULL,
    [run_status]              VARCHAR (128)      NOT NULL,
    [row_count]               INT                NOT NULL,
    [session_id]              INT                NULL
);


GO
PRINT N'Creating [stage].[DV_Satellite]...';


GO
CREATE TABLE [stage].[DV_Satellite] (
    [metrics_stage_run_time]      DATETIMEOFFSET (7) NOT NULL,
    [satellite_key]               INT                NOT NULL,
    [hub_key]                     INT                NOT NULL,
    [link_key]                    INT                NOT NULL,
    [link_hub_satellite_flag]     CHAR (1)           NOT NULL,
    [satellite_name]              VARCHAR (128)      NOT NULL,
    [satellite_abbreviation]      VARCHAR (4)        NULL,
    [satellite_schema]            VARCHAR (128)      NOT NULL,
    [satellite_database]          VARCHAR (128)      NOT NULL,
    [duplicate_removal_threshold] INT                NOT NULL,
    [is_columnstore]              BIT                NOT NULL,
    [is_retired]                  BIT                NOT NULL,
    [release_key]                 INT                NOT NULL,
    [release_number]              INT                NULL,
    [version_number]              INT                NOT NULL,
    [updated_by]                  VARCHAR (30)       NULL,
    [updated_datetime]            DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[DV_Schedule]...';


GO
CREATE TABLE [stage].[DV_Schedule] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [schedule_key]           INT                NOT NULL,
    [schedule_name]          VARCHAR (128)      NOT NULL,
    [schedule_description]   VARCHAR (256)      NULL,
    [schedule_frequency]     VARCHAR (128)      NOT NULL,
    [is_cancelled]           BIT                NOT NULL,
    [release_key]            INT                NOT NULL,
    [release_number]         INT                NULL,
    [version_number]         INT                NOT NULL,
    [updated_by]             VARCHAR (30)       NOT NULL,
    [updated_datetime]       DATETIMEOFFSET (7) NOT NULL
);


GO
PRINT N'Creating [stage].[DV_Schedule_Hierarchy]...';


GO
CREATE TABLE [stage].[DV_Schedule_Hierarchy] (
    [metrics_stage_run_time]     DATETIMEOFFSET (7) NOT NULL,
    [source_table_hierarchy_key] INT                NOT NULL,
    [source_table_key]           INT                NOT NULL,
    [prior_table_key]            INT                NOT NULL,
    [is_cancelled]               BIT                NOT NULL,
    [release_key]                INT                NOT NULL,
    [release_number]             INT                NULL,
    [version_number]             INT                NOT NULL,
    [updated_by]                 VARCHAR (30)       NOT NULL,
    [update_date_time]           DATETIMEOFFSET (7) NOT NULL
);


GO
PRINT N'Creating [stage].[DV_Schedule_Run]...';


GO
CREATE TABLE [stage].[DV_Schedule_Run] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [run_key]                INT                IDENTITY (1, 1) NOT NULL,
    [run_status]             VARCHAR (128)      NOT NULL,
    [run_schedule_name]      VARCHAR (128)      NOT NULL,
    [run_start_datetime]     DATETIMEOFFSET (7) NULL,
    [run_end_datetime]       DATETIMEOFFSET (7) NULL,
    [updated_datetime]       DATETIMEOFFSET (7) NOT NULL
);


GO
PRINT N'Creating [stage].[DV_Schedule_Table]...';


GO
CREATE TABLE [stage].[DV_Schedule_Table] (
    [metrics_stage_run_time]    DATETIMEOFFSET (7) NOT NULL,
    [schedule_source_table_key] INT                NOT NULL,
    [schedule_key]              INT                NOT NULL,
    [source_table_key]          INT                NOT NULL,
    [source_table_load_type]    VARCHAR (50)       NOT NULL,
    [priority]                  VARCHAR (50)       NOT NULL,
    [queue]                     VARCHAR (50)       NOT NULL,
    [is_cancelled]              BIT                NOT NULL,
    [release_key]               INT                NOT NULL,
    [release_number]            INT                NULL,
    [version_number]            INT                NOT NULL,
    [updated_by]                VARCHAR (30)       NOT NULL,
    [updated_datetime]          DATETIMEOFFSET (7) NOT NULL
);


GO
PRINT N'Creating [stage].[DV_Source_System]...';


GO
CREATE TABLE [stage].[DV_Source_System] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [source_system_key]      INT                NOT NULL,
    [source_system_name]     VARCHAR (50)       NOT NULL,
    [timevault_name]         VARCHAR (50)       NULL,
    [is_retired]             BIT                NOT NULL,
    [release_key]            INT                NOT NULL,
    [release_number]         INT                NULL,
    [version_number]         INT                NULL,
    [updated_by]             VARCHAR (30)       NULL,
    [update_date_time]       DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[DV_Source_Table_Raw]...';


GO
CREATE TABLE [stage].[DV_Source_Table_Raw] (
    [metrics_stage_run_time]  DATETIMEOFFSET (7) NOT NULL,
    [source_table_key]        INT                NOT NULL,
    [system_key]              INT                NOT NULL,
    [source_table_schema]     VARCHAR (128)      NOT NULL,
    [source_table_name]       VARCHAR (128)      NOT NULL,
    [source_table_load_type]  VARCHAR (50)       NOT NULL,
    [source_procedure_schema] VARCHAR (128)      NULL,
    [source_procedure_name]   VARCHAR (128)      NULL,
    [is_retired]              BIT                NOT NULL,
    [release_key]             INT                NOT NULL,
    [release_number]          INT                NULL,
    [version_number]          INT                NULL,
    [updated_by]              VARCHAR (30)       NULL,
    [update_date_time]        DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[DV_Hub_Column]...';


GO
CREATE TABLE [stage].[DV_Hub_Column] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [hub_col_key]            INT                NOT NULL,
    [hub_key_column_key]     INT                NOT NULL,
    [column_key]             INT                NOT NULL,
    [release_key]            INT                NOT NULL,
    [release_number]         INT                NULL,
    [version_number]         INT                NOT NULL,
    [updated_by]             VARCHAR (30)       NULL,
    [updated_datetime]       DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Creating [stage].[Link_Column_Source]...';


GO
CREATE TABLE [stage].[Link_Column_Source] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [source_table_key]       INT                NULL,
    [column_key]             INT                NULL
);


GO
PRINT N'Creating [stage].[Link_Hub_Column_Key]...';


GO
CREATE TABLE [stage].[Link_Hub_Column_Key] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [hub_key]                INT                NULL,
    [hub_key_column_key]     INT                NULL,
    [column_key]             INT                NULL
);


GO
PRINT N'Creating [stage].[Link_Hub_Link_Column]...';


GO
CREATE TABLE [stage].[Link_Hub_Link_Column] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [hub_key]                INT                NULL,
    [hub_key_column_key]     INT                NULL,
    [column_key]             INT                NULL,
    [link_key]               INT                NULL
);


GO
PRINT N'Creating [stage].[Link_Hub_Satellite]...';


GO
CREATE TABLE [stage].[Link_Hub_Satellite] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [satellite_key]          INT                NULL,
    [hub_key]                INT                NULL
);


GO
PRINT N'Creating [stage].[Link_Link_Satellite]...';


GO
CREATE TABLE [stage].[Link_Link_Satellite] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [satellite_key]          INT                NULL,
    [link_key]               INT                NULL
);


GO
PRINT N'Creating [stage].[Link_Manifest_Source]...';


GO
CREATE TABLE [stage].[Link_Manifest_Source] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [source_table_key]       INT                NULL,
    [run_manifest_key]       INT                NULL
);


GO
PRINT N'Creating [stage].[Link_Run_Manifest]...';


GO
CREATE TABLE [stage].[Link_Run_Manifest] (
    [metrics_stage_run_time] DATETIMEOFFSET (7) NOT NULL,
    [run_key]                INT                NULL,
    [run_manifest_key]       INT                NULL
);


GO
PRINT N'Creating [stage].[log4_Severity]...';


GO
CREATE TABLE [stage].[log4_Severity] (
    [SeverityId]   INT           NOT NULL,
    [SeverityName] VARCHAR (128) NOT NULL
);


GO
PRINT N'Creating unnamed constraint on [stage].[Hub_DataDictionary]...';


GO
ALTER TABLE [stage].[Hub_DataDictionary]
    ADD DEFAULT (sysdatetimeoffset()) FOR [metrics_stage_run_time];


GO
PRINT N'Creating unnamed constraint on [stage].[Satellite_DataDictionary]...';


GO
ALTER TABLE [stage].[Satellite_DataDictionary]
    ADD DEFAULT (sysdatetimeoffset()) FOR [metrics_stage_run_time];


GO
PRINT N'Creating unnamed constraint on [stage].[Link_DataDictionary]...';


GO
ALTER TABLE [stage].[Link_DataDictionary]
    ADD DEFAULT (sysdatetimeoffset()) FOR [metrics_stage_run_time];


GO
PRINT N'Creating unnamed constraint on [stage].[Column_DataDictionary]...';


GO
ALTER TABLE [stage].[Column_DataDictionary]
    ADD DEFAULT (sysdatetimeoffset()) FOR [metrics_stage_run_time];


GO
PRINT N'Creating unnamed constraint on [stage].[HubKey_DataDictionary]...';


GO
ALTER TABLE [stage].[HubKey_DataDictionary]
    ADD DEFAULT (sysdatetimeoffset()) FOR [metrics_stage_run_time];


GO
PRINT N'Creating unnamed constraint on [stage].[SourceTable_DataDictionary]...';


GO
ALTER TABLE [stage].[SourceTable_DataDictionary]
    ADD DEFAULT (sysdatetimeoffset()) FOR [metrics_stage_run_time];


GO
PRINT N'Creating [stage].[usp_Link_Link_Satellite]...';


GO
CREATE PROCEDURE [stage].[usp_Link_Link_Satellite]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'Link_Link_Satellite'))
	DROP TABLE stage.Link_Link_Satellite;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,satellite_key
		,link_key
	INTO [stage].[Link_Link_Satellite]
	FROM [$(ODE_Metrics_Vault)].[Sat].[s_DV_Satellite]
	WHERE link_hub_satellite_flag = 'L'
	AND [dv_row_is_current] = 1
	AND [dv_is_tombstone] = 0
END
GO
PRINT N'Creating [stage].[usp_Link_Satellite_Column]...';


GO
CREATE PROCEDURE [stage].[usp_Link_Satellite_Column]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'Link_Satellite_Column'))
	DROP TABLE stage.Link_Satellite_Column;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,satellite_key
		,column_key
	INTO [stage].[Link_Satellite_Column]
	FROM [$(ODE_Metrics_Vault)].[RawSat].[s_DV_Satellite_Column]
	WHERE [dv_row_is_current] = 1
	AND [dv_is_tombstone] = 0
END
GO
PRINT N'Creating [stage].[usp_Link_Column_Source]...';


GO

CREATE PROCEDURE [stage].[usp_Link_Column_Source]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'Link_Column_Source'))
	DROP TABLE stage.Link_Column_Source;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,table_key AS source_table_key
		,column_key
	INTO [stage].[Link_Column_Source]
	FROM [$(ODE_Metrics_Vault)].[Sat].[s_DV_Column]
	WHERE [dv_row_is_current] = 1
	AND [dv_is_tombstone] = 0
END
GO
PRINT N'Creating [stage].[usp_Link_Manifest_Source]...';


GO
CREATE PROCEDURE [stage].[usp_Link_Manifest_Source]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'Link_Manifest_Source'))
	DROP TABLE stage.Link_Manifest_Source;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,source_table_key
		,run_manifest_key
	INTO [stage].[Link_Manifest_Source]
	FROM [$(ODE_Metrics_Vault)].[Sat].[s_DV_Run_Manifest]
	WHERE [dv_row_is_current] = 1
	AND [dv_is_tombstone] = 0
END
GO
PRINT N'Creating [stage].[usp_Link_Run_Manifest]...';


GO
CREATE PROCEDURE [stage].[usp_Link_Run_Manifest]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'Link_Run_Manifest'))
	DROP TABLE stage.Link_Run_Manifest;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,run_key
		,run_manifest_key
	INTO [stage].[Link_Run_Manifest]
	FROM [$(ODE_Metrics_Vault)].[Sat].[s_DV_Run_Manifest]
	WHERE [dv_row_is_current] = 1
	AND [dv_is_tombstone] = 0
END
GO
PRINT N'Creating [stage].[usp_Link_Table_Schedule]...';


GO
CREATE PROCEDURE [stage].[usp_Link_Table_Schedule]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'Link_Table_Schedule'))
	DROP TABLE stage.Link_Table_Schedule;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,schedule_key
		,schedule_source_table_key as [schedule_table_key]
		,[source_table_key]
	INTO [stage].[Link_Table_Schedule]
	FROM [$(ODE_Metrics_Vault)].[RawSat].[s_DV_Schedule_Table]
	WHERE [dv_row_is_current] = 1
	AND [dv_is_tombstone] = 0
END
GO
PRINT N'Creating [stage].[usp_Link_Journal_Exception]...';


GO

CREATE PROCEDURE [stage].[usp_Link_Journal_Exception]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'Link_Journal_Exception'))
	DROP TABLE stage.Link_Journal_Exception;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,ExceptionId
		,JournalId
	INTO [stage].[Link_Journal_Exception]
	FROM [$(ODE_Metrics_Vault)].[RawSat].[s_DV_Journal]
	WHERE [dv_row_is_current] = 1
	AND [dv_is_tombstone] = 0
	AND ExceptionId IS NOT NULL
END
GO
PRINT N'Creating [stage].[usp_Satellite_Integrity]...';


GO

CREATE PROCEDURE [stage].[usp_Satellite_Integrity]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

EXEC [$(ODE_Config)].dv_integrity.dv_sat_metrics 0,[$(ODE_Metrics_Stage)],'Stage','Satellite_Integrity'

END
GO
PRINT N'Creating [stage].[usp_Link_Integrity]...';


GO
CREATE PROCEDURE [stage].[usp_Link_Integrity]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

EXEC [$(ODE_Config)].dv_integrity.dv_link_metrics 0, [$(ODE_Metrics_Stage)],'Stage','Link_Integrity'

END
GO
PRINT N'Creating [stage].[usp_Hub_Integrity]...';


GO
CREATE PROCEDURE [stage].[usp_Hub_Integrity]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

EXEC [$(ODE_Config)].dv_integrity.dv_hub_metrics 0, [$(ODE_Metrics_Stage)],'Stage','Hub_Integrity'

END
GO
PRINT N'Creating [stage].[usp_Column_Integrity]...';


GO
CREATE PROCEDURE [stage].[usp_Column_Integrity]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

EXEC [$(ODE_Config)].dv_integrity.dv_col_metrics 0, [$(ODE_Metrics_Stage)],'Stage','Column_Integrity'

END
GO
PRINT N'Creating [stage].[usp_DV_Source_Table_Raw]...';


GO

CREATE PROCEDURE [stage].[usp_DV_Source_Table_Raw]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Source_Table_Raw'))
	DROP TABLE stage.DV_Source_Table_Raw;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,s.[source_table_key]
		,s.[system_key]
		,s.[source_table_schema]
		,s.[source_table_name]
		,s.[source_table_load_type]
		,s.[source_procedure_schema]
		,s.[source_procedure_name]
		,s.[is_retired]
		,s.[release_key]
		,m.[release_number]
		,s.[version_number]
		,s.[updated_by]
		,s.[update_date_time]
	INTO [stage].[DV_Source_Table_Raw]
	FROM [$(ODE_Config)].[dbo].[dv_source_table] s
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON s.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Hub]...';


GO

--TO DO: Config database variable
--TO DO: Depending on the delta switch option, al stored procedures should have or have not a parameter

CREATE PROCEDURE [stage].[usp_DV_Hub]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Hub'))
	DROP TABLE stage.DV_Hub;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,h.[hub_key]
		,h.[hub_name]
		,h.[hub_abbreviation]
		,h.[hub_schema]
		,h.[hub_database]
		,h.[is_retired]
		,h.[release_key]
		,m.[release_number]
		,h.[version_number]
		,h.[updated_by]
		,h.[updated_datetime]
	INTO [stage].[DV_Hub]
	FROM [$(ODE_Config)].[dbo].[dv_hub] h
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON h.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Link]...';


GO

CREATE PROCEDURE [stage].[usp_DV_Link]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Link'))
	DROP TABLE stage.DV_Link;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,l.[link_key]
		,l.[link_name]
		,l.[link_abbreviation]
		,l.[link_schema]
		,l.[link_database]
		,l.[is_retired]
		,l.[release_key]
		,m.[release_number]
		,l.[version_number]
		,l.[updated_by]
		,l.[updated_datetime]
	INTO [stage].[DV_Link]
	FROM [$(ODE_Config)].[dbo].[dv_link] l
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON l.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Satellite]...';


GO

CREATE PROCEDURE [stage].[usp_DV_Satellite]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Satellite'))
	DROP TABLE stage.DV_Satellite;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,s.[satellite_key]
		,s.[hub_key]
		,s.[link_key]
		,s.[link_hub_satellite_flag]
		,s.[satellite_name]
		,s.[satellite_abbreviation]
		,s.[satellite_schema]
		,s.[satellite_database]
		,s.[duplicate_removal_threshold]
		,s.[is_columnstore]
		,s.[is_retired]
		,s.[release_key]
		,m.[release_number]
		,s.[version_number]
		,s.[updated_by]
		,s.[updated_datetime]
	INTO [stage].[DV_Satellite]
	FROM [$(ODE_Config)].[dbo].[dv_satellite] s
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON s.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Release]...';


GO

CREATE PROCEDURE [stage].[usp_DV_Release]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Release'))
	DROP TABLE stage.DV_Release;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,[release_number]
		,[release_description]
		,[reference_number]
		,[reference_source]
		,[build_number]
		,[build_date]
		,[build_server]
		,[release_built_by]
		,[release_start_datetime]
		,[release_complete_datetime]
		,[release_count]
		,[version_number]
		,[updated_by]
		,[updated_datetime]
	INTO [stage].[DV_Release]
	FROM [$(ODE_Config)].[dv_release].[dv_release_master] m
END
GO
PRINT N'Creating [stage].[usp_DV_Column]...';


GO

CREATE PROCEDURE [stage].[usp_DV_Column]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Column'))
	DROP TABLE stage.DV_Column;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,c.[column_key]
		,c.[table_key]
		,c.[column_name]
		,c.[column_type]
		,c.[column_length]
		,c.[column_precision]
		,c.[column_scale]
		,c.[Collation_Name]
		,c.[bk_ordinal_position]
		,c.[source_ordinal_position]
		,c.[satellite_ordinal_position]
		,c.[is_source_date]
		,c.[discard_flag]
		,c.[is_retired]
		,c.[release_key]
		,m.[release_number]
		,c.[version_number]
		,c.[updated_by]
		,c.[update_date_time]
	INTO [stage].[DV_Column]
	FROM [$(ODE_Config0].[dbo].[dv_column] c
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON c.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Source_Table]...';


GO

CREATE PROCEDURE [stage].[usp_DV_Source_Table]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Source_Table'))
	DROP TABLE stage.DV_Source_Table;

;WITH hSTable	AS (SELECT * FROM [$(ODE_Metrics_Vault)].hub.h_DV_Source_Table)
,hSSys			AS (SELECT * FROM [$(ODE_Metrics_Vault)].RawHub.h_DV_Source_System)
,sSTable		AS (SELECT * FROM [$(ODE_Metrics_Vault)].RawSat.s_DV_Source_Table_Raw WHERE [dv_row_is_current] = 1 AND [dv_is_tombstone] = 0)
,sSSys			AS (SELECT * FROM [$(ODE_Metrics_Vault)].RawSat.s_DV_Source_System WHERE [dv_row_is_current] = 1 AND [dv_is_tombstone] = 0)

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,hSTable.[source_table_key]
		,sSTable.[system_key] AS [source_system_key]
		,sSSys.[is_retired] AS [source_system_is_retired]
		,sSSys.[source_system_name]
		,sSSys.[timevault_name]
		,sSSys.[release_key] AS [source_system_release_key]
		,sSSys.[release_number] AS [source_system_release_number]
		,sSTable.[source_table_schema]
		,sSTable.[source_table_name]
		,sSTable.[source_table_load_type]
		,sSTable.[source_procedure_schema]
		,sSTable.[source_procedure_name]
		,sSTable.[is_retired]
		,sSTable.[release_key]
		,sSTable.[release_number]
		,sSTable.[updated_by]
		,sSTable.[update_date_time]
	INTO [stage].[DV_Source_Table]
	FROM hSTable
	LEFT JOIN sSTable	ON hSTable.h_DV_Source_Table_key = sSTable.h_DV_Source_Table_key
	LEFT JOIN hSSys		ON sSTable.system_key = hSSys.source_system_key
	LEFT JOIN sSSys		ON hSSys.h_DV_Source_System_key = sSSys.h_DV_Source_System_key
END
GO
PRINT N'Creating [stage].[usp_DV_Schedule_Run]...';


GO

CREATE PROCEDURE [stage].[usp_DV_Schedule_Run]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Schedule_Run'))
	DROP TABLE stage.DV_Schedule_Run;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,[run_key]
		,[run_status]
		,[run_schedule_name]
		,[run_start_datetime]
		,[run_end_datetime]
		,[updated_datetime]
	INTO [stage].[DV_Schedule_Run]
	FROM [$(ODE_Config)].[dv_scheduler].[dv_run]
END
GO
PRINT N'Creating [stage].[usp_DV_Run_Manifest]...';


GO

CREATE PROCEDURE [stage].[usp_DV_Run_Manifest]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Run_Manifest'))
	DROP TABLE stage.DV_Run_Manifest;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,[run_manifest_key]
		,[run_key]
		,[source_system_name]
		,[source_timevault]
		,[source_table_schema]
		,[source_table_name]
		,[source_table_load_type]
		,[source_table_key]
		,[source_procedure_schema]
		,[source_procedure_name]
		,[priority]
		,[queue]
		,[start_datetime]
		,[completed_datetime]
		,[run_status]
		,[row_count]
		,[session_id]
	INTO [stage].[DV_Run_Manifest]
	FROM [$(ODE_Config)].[dv_scheduler].[dv_run_manifest]
END
GO
PRINT N'Creating [stage].[usp_DV_Hub_Key]...';


GO

CREATE PROCEDURE [stage].[usp_DV_Hub_Key]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Hub_Key'))
	DROP TABLE stage.DV_Hub_Key;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,c.[hub_key_column_key]
		,c.[hub_key]
		,c.[hub_key_column_name]
		,c.[hub_key_column_type]
		,c.[hub_key_column_length]
		,c.[hub_key_column_precision]
		,c.[hub_key_column_scale]
		,c.[hub_key_Collation_Name]
		,c.[hub_key_ordinal_position]
		,c.[release_key]
		,m.[release_number]
		,c.[version_number]
		,c.[updated_by]
		,c.[updated_datetime]
	INTO [stage].[DV_Hub_Key]
	FROM [$(ODE_Config)].[dbo].[dv_hub_key_column] c
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON c.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Hub_Column]...';


GO
CREATE PROCEDURE [stage].[usp_DV_Hub_Column]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Hub_Column'))
	DROP TABLE stage.DV_Hub_Column;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,c.[hub_col_key]
		,c.[hub_key_column_key]
		,c.[column_key]
		,c.[release_key]
		,m.[release_number]
		,c.[version_number]
		,c.[updated_by]
		,c.[updated_datetime]
	INTO [stage].[DV_Hub_Column]
	FROM [$(ODE_Config)].[dbo].[dv_hub_column] c
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON c.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Hub_Link]...';


GO
CREATE PROCEDURE [stage].[usp_DV_Hub_Link]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Hub_Link'))
	DROP TABLE stage.DV_Hub_Link;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,l.[hub_link_key]
		,l.[link_key]
		,l.[hub_key]
		,l.[release_key]
		,m.[release_number]
		,l.[version_number]
		,l.[updated_by]
		,l.[updated_datetime]
	INTO [stage].[DV_Hub_Link]
	FROM [$(ODE_Config)].[dbo].[dv_hub_link] l
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON l.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Satellite_Column]...';


GO
CREATE PROCEDURE [stage].[usp_DV_Satellite_Column]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Satellite_Column'))
	DROP TABLE stage.DV_Satellite_Column;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,s.[satellite_col_key]
		,s.[satellite_key]
		,s.[column_key]
		,s.[release_key]
		,m.[release_number]
		,s.[version_number]
		,s.[updated_by]
		,s.[updated_datetime]
	INTO [stage].[DV_Satellite_Column]
	FROM [$(ODE_Config)].[dbo].[dv_satellite_column] s
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON s.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Source_System]...';


GO
CREATE PROCEDURE [stage].[usp_DV_Source_System]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Source_System'))
	DROP TABLE stage.DV_Source_System;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,s.[source_system_key]
		,s.[source_system_name]
		,s.[timevault_name]
		,s.[is_retired]
		,s.[release_key]
		,m.[release_number]
		,s.[version_number]
		,s.[updated_by]
		,s.[update_date_time]
	INTO [stage].[DV_Source_System]
	FROM [$(ODE_Config)].[dbo].[dv_source_system] s
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON s.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Schedule]...';


GO
CREATE PROCEDURE [stage].[usp_DV_Schedule]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Schedule'))
	DROP TABLE stage.DV_Schedule;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,s.[schedule_key]
		,s.[schedule_name]
		,s.[schedule_description]
		,s.[schedule_frequency]
		,s.[is_cancelled]
		,s.[release_key]
		,m.[release_number]
		,s.[version_number]
		,s.[updated_by]
		,s.[updated_datetime]
	INTO [stage].[DV_Schedule]
	FROM [$(ODE_Config)].[dv_scheduler].[dv_schedule] s
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON s.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Schedule_Table]...';


GO
CREATE PROCEDURE [stage].[usp_DV_Schedule_Table]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Schedule_Table'))
	DROP TABLE stage.DV_Schedule_Table;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,s.[schedule_source_table_key]
		,s.[schedule_key]
		,s.[source_table_key]
		,s.[source_table_load_type]
		,s.[priority]
		,s.[queue]
		,s.[is_cancelled]
		,s.[release_key]
		,m.[release_number]
		,s.[version_number]
		,s.[updated_by]
		,s.[updated_datetime]
	INTO [stage].[DV_Schedule_Table]
	FROM [$(ODE_Config)].[dv_scheduler].[dv_schedule_source_table] s
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON s.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Schedule_Hierarchy]...';


GO
CREATE PROCEDURE [stage].[usp_DV_Schedule_Hierarchy]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Schedule_Hierarchy'))
	DROP TABLE stage.DV_Schedule_Hierarchy;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,s.[source_table_hierarchy_key]
		,s.[source_table_key]
		,s.[prior_table_key]
		,s.[is_cancelled]
		,s.[release_key]
		,m.[release_number]
		,s.[version_number]
		,s.[updated_by]
		,s.[update_date_time]
	INTO [stage].[DV_Schedule_Hierarchy]
	FROM [$(ODE_Config)].[dv_scheduler].[dv_source_table_hierarchy] s
	LEFT JOIN [$(ODE_Config)].[dv_release].[dv_release_master] m
	ON s.release_key = m.release_key
END
GO
PRINT N'Creating [stage].[usp_DV_Exception]...';


GO
CREATE PROCEDURE [stage].[usp_DV_Exception]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Exception'))
	DROP TABLE stage.DV_Exception;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,[ExceptionId]
		,[UtcDate]
		,[SystemDate]
		,[ErrorContext]
		,[ErrorNumber]
		,[ErrorSeverity]
		,[ErrorState]
		,[ErrorProcedure]
		,[ErrorLine]
		,[ErrorMessage]
		,[SessionId]
		,[ServerName]
		,[DatabaseName]
		,[HostName]
		,[ProgramName]
		,[NTDomain]
		,[NTUsername]
		,[LoginName]
		,[OriginalLoginName]
		,[SessionLoginTime]
	INTO [stage].[DV_Exception]
	FROM [$(ODE_Config)].[log4].[Exception] e
END
GO
PRINT N'Creating [stage].[usp_DV_Journal]...';


GO
CREATE PROCEDURE [stage].[usp_DV_Journal]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'DV_Journal'))
	DROP TABLE stage.DV_Journal;

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,j.[JournalId]
		,j.[UtcDate]
		,j.[SystemDate]
		,j.[Task]
		,j.[FunctionName]
		,j.[StepInFunction]
		,j.[MessageText]
		,j.[SeverityId]
		,j.[ExceptionId]
		,j.[SessionId]
		,j.[ServerName]
		,j.[DatabaseName]
		,j.[HostName]
		,j.[ProgramName]
		,j.[NTDomain]
		,j.[NTUsername]
		,j.[LoginName]
		,j.[OriginalLoginName]
		,j.[SessionLoginTime]
		,jd.[ExtraInfo]
	INTO [stage].[DV_Journal]
	FROM [$(ODE_Config)].[log4].[Journal] j
	LEFT JOIN [$(ODE_Config)].[log4].[JournalDetail] jd
	ON j.JournalId = jd.JournalId
END
GO
PRINT N'Creating [stage].[usp_Link_Hub_Satellite]...';


GO
CREATE PROCEDURE [stage].[usp_Link_Hub_Satellite]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'Link_Hub_Satellite'))
	DROP TABLE stage.Link_Hub_Satellite;

		SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,satellite_key
		, hub_key
	INTO [stage].[Link_Hub_Satellite]
	FROM [$(ODE_Metrics_Vault)].[Sat].[s_DV_Satellite]
	WHERE link_hub_satellite_flag = 'H'
	AND [dv_row_is_current] = 1
	AND [dv_is_tombstone] = 0
END
GO
PRINT N'Creating [stage].[usp_Link_Hub_Column_Key]...';


GO
CREATE PROCEDURE [stage].[usp_Link_Hub_Column_Key]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'Link_Hub_Column_Key'))
	DROP TABLE stage.Link_Hub_Column_Key;

	;WITH hHubKey	AS (SELECT * FROM [$(ODE_Metrics_Vault)].[hub].[h_DV_Hub_Key])
	,sColumn		AS (SELECT * FROM [$(ODE_Metrics_Vault)].[RawSat].[s_DV_Hub_Column]	WHERE [dv_row_is_current] = 1	AND [dv_is_tombstone] = 0)
	,sHubKey		AS (SELECT * FROM [$(ODE_Metrics_Vault)].[Sat].[s_DV_Hub_Key]		WHERE [dv_row_is_current] = 1	AND [dv_is_tombstone] = 0)

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,sHubKey.hub_key
		,k.hub_key_column_key
		,c.column_key
	INTO [stage].[Link_Hub_Column_Key]
	FROM hHubKey k
	JOIN sHubKey ON k.h_DV_Hub_Key_key = sHubKey.h_DV_Hub_Key_key
	JOIN sColumn c ON c.hub_key_column_key = k.hub_key_column_key
END
GO
PRINT N'Creating [stage].[usp_Link_Hub_Link_Column]...';


GO

CREATE PROCEDURE [stage].[usp_Link_Hub_Link_Column]
--	@LoadType varchar(128)
AS
BEGIN
	SET NOCOUNT ON;

	IF (EXISTS (SELECT * 
				FROM INFORMATION_SCHEMA.TABLES 
				WHERE TABLE_SCHEMA = 'stage' AND TABLE_NAME = 'Link_Hub_Link_Column'))
	DROP TABLE stage.Link_Hub_Link_Column;

	;WITH sHubKey	AS (SELECT * FROM [$(ODE_Metrics_Vault)].[Sat].[s_DV_Hub_Key]			WHERE [dv_row_is_current] = 1	AND [dv_is_tombstone] = 0)
	,sHubColumn		AS (SELECT * FROM [$(ODE_Metrics_Vault)].[RawSat].[s_DV_Hub_Column]		WHERE [dv_row_is_current] = 1	AND [dv_is_tombstone] = 0)
	,sHubLink		AS (SELECT * FROM [$(ODE_Metrics_Vault)].[RawSat].[s_DV_Hub_Link]			WHERE [dv_row_is_current] = 1	AND [dv_is_tombstone] = 0)
	,sSatellite		AS (SELECT * FROM [$(ODE_Metrics_Vault)].[Sat].[s_DV_Satellite]			WHERE [dv_row_is_current] = 1	AND [dv_is_tombstone] = 0)
	,sSatColumn		AS (SELECT * FROM [$(ODE_Metrics_Vault)].[RawSat].[s_DV_Satellite_Column]	WHERE [dv_row_is_current] = 1	AND [dv_is_tombstone] = 0)

	SELECT metrics_stage_run_time = SYSDATETIMEOFFSET()
		,h.hub_key
		,h.hub_key_column_key
		,hc.column_key 
		,l.link_key
	INTO [stage].[Link_Hub_Link_Column]
	FROM sHubKey h
	JOIN sHubColumn hc
	ON hc.hub_key_column_key = h.hub_key_column_key
	JOIN sHubLink l
	ON h.hub_key = l.hub_key
	JOIN sSatellite s
	ON l.link_key = s.link_key
	AND s.link_hub_satellite_flag = 'L'
	JOIN sSatColumn sc
	ON s.satellite_key = sc.satellite_key
	AND hc.column_key = sc.column_key
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
